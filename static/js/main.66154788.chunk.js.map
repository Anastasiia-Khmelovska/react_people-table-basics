{"version":3,"sources":["api.ts","components/PersonLink.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","components/Navigation.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","findPeopleParent","name","sex","born","died","fatherName","motherName","slug","to","className","classNames","Loader","PeopleTable","people","isLoading","error","useParams","find","pers","length","map","Navigation","text","isActive","App","useState","setPeople","setError","setIsLoading","useEffect","dataFromServer","catch","finally","role","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.66154788.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n  findPeopleParent: (name: string | null) => Person | null;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, findPeopleParent }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n  } = person;\n\n  return (\n    <>\n      <td>\n        <Link\n          to={`/people/${slug}`}\n          className={classNames('', { 'has-text-danger': sex === 'f' })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {\n          findPeopleParent(motherName)\n            ? (\n              <Link\n                className=\"has-text-danger\"\n                to={`/people/${findPeopleParent(motherName)?.slug}`}\n              >\n                {motherName}\n              </Link>\n            )\n            : (motherName || '-')\n        }\n      </td>\n      <td>\n        {\n          findPeopleParent(fatherName)\n            ? (\n              <Link\n                to={`/people/${findPeopleParent(fatherName)?.slug}`}\n              >\n                {fatherName}\n              </Link>\n            )\n            : (fatherName || '-')\n        }\n      </td>\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { Loader } from './Loader';\n\ntype Props = {\n  people: Person[];\n  isLoading: boolean;\n  error: string\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  isLoading,\n  error,\n}) => {\n  const { slug = '' } = useParams();\n  const findPeopleParent = (name: string | null) => (\n    people.find(pers => pers.name === name) || null);\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {isLoading\n          ? (<Loader />)\n          : (\n            <>\n              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                {error}\n              </p>\n\n              {!people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              <table\n                data-cy=\"peopleTable\"\n                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n              >\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Sex</th>\n                    <th>Born</th>\n                    <th>Died</th>\n                    <th>Mother</th>\n                    <th>Father</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {\n                    people.map(person => (\n                      <tr\n                        data-cy=\"person\"\n                        key={person.slug}\n                        className={classNames(\n                          { 'has-background-warning': person.slug === slug },\n                        )}\n                      >\n                        <PersonLink\n                          person={person}\n                          findPeopleParent={findPeopleParent}\n                        />\n                      </tr>\n\n                    ))\n                  }\n                </tbody>\n              </table>\n            </>\n\n          )}\n\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\nexport const Navigation: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({\n      isActive,\n    }) => classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })}\n  >\n    {text}\n  </NavLink>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getPeople } from './api';\nimport { Person } from './types';\nimport { PeopleTable } from './components/PeopleTable';\nimport { Navigation } from './components/Navigation';\n\nexport const App: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(dataFromServer => {\n        setPeople(dataFromServer);\n      })\n      .catch(() => (setError('Something went wrong')))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <Navigation to=\"/\" text=\"Home\" />\n            <Navigation to=\"/people\" text=\"People\" />\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n            <Route\n              path=\"/home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n            <Route path=\"/people\">\n              <Route\n                index\n                element={(\n                  <>\n                    <h1 className=\"title\">People Page</h1>\n                    <PeopleTable\n                      people={people}\n                      isLoading={isLoading}\n                      error={error}\n\n                    />\n                  </>\n                )}\n              />\n              <Route\n                path=\":slug\"\n                element={(\n                  <>\n                    <h1 className=\"title\">People Page</h1>\n                    <PeopleTable\n                      people={people}\n                      isLoading={isLoading}\n                      error={error}\n                    />\n                  </>\n                )}\n              />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}